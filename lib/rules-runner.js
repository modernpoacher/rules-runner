"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _cloneDeep=_interopRequireDefault(require("clone-deep"));var _objectPath=_interopRequireDefault(require("object-path"));var _common=require("./common");var comparators=_interopRequireWildcard(require("./comparators"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const hasArrayKey=key=>/^(.*)\[\]$/.test(key);function getArrayKey(key){const[,arrayKey]=key.match(/^(.*)\[\]$/);return arrayKey;}class RulesRunner{constructor(config,options={}){this.config=config;this.options=options;}run(values={}){return Object.values(this.config).reduce((accumulator,rule)=>{if(Reflect.has(rule,'if')){const IF=Reflect.get(rule,'if');if(this.runTests(IF,accumulator)){if(Reflect.has(rule,'then')){const THEN=Reflect.get(rule,'then');return this.runOutcomes(THEN,accumulator);}}else{if(Reflect.has(rule,'otherwise')){const OTHERWISE=Reflect.get(rule,'otherwise');return this.runOutcomes(OTHERWISE,accumulator);}}return accumulator;}throw new Error('A rule must have an `if` and a `then`');},(0,_cloneDeep.default)(values));}runTests(expectations={},accumulator={}){return Object.entries(expectations).every(([key,expected])=>{if(_objectPath.default.has(accumulator,key)){const actual=_objectPath.default.get(accumulator,key);return this.runTest(expected,actual);}});}runTest(expected={},...args){if(expected===null)throw new Error('Expectation is null');if((0,_common.isObject)(expected)){const[comparator]=Object.keys(expected);if(Reflect.has(comparators,comparator)){return Reflect.get(comparators,comparator).call(this,expected,...args);}throw new Error(`Unknown comparator "${comparator}"`);}if((0,_common.isBoolean)(expected)){const{boolean}=comparators;return boolean.call(this,expected,...args);}const{equals}=comparators;return equals.call(this,expected,...args);}runOutcomes(outcomes={},accumulator={}){return Object.entries(outcomes).reduce((accumulator,[key,outcome])=>{if(hasArrayKey(key)){_objectPath.default.push(accumulator,getArrayKey(key),outcome);}else{_objectPath.default.set(accumulator,key,outcome);}return accumulator;},accumulator);}}exports.default=RulesRunner;